angular.module("stateResolver", ["ui.router"]); var StateResolver; !function (t) { "use strict"; var e = function () { function t() { this.createInstance = function (e) { var i = new t; return i.priority = 0, i.promise = e.promise, i.state = e.state, i }, this.priority = 0, this.$get = function () { return new t } } return t }(); t.StatePromiseProvider = e, angular.module("stateResolver").provider("statePromise", [e]) }(StateResolver || (StateResolver = {})); var StateResolver; !function (t) { "use strict"; var e = function () { function e() { var e = this; this.configure = function (i) { return i.type && i.type !== t.StatePromiseType.canActivate ? (i.type === t.StatePromiseType.activate && e.activationFunctions.push(i), void (i.type === t.StatePromiseType.deactivate && e.deactivationFunctions.push(i))) : void e.statePromises.push(i) }, this.statePromises = [], this.deactivationFunctions = [], this.activationFunctions = [], this.getStatePromises = function (t) { return e.statePromises.filter(function (e) { return null == e.state || e.state == t || e.states && e.states.indexOf(t) > -1 ? e.states && e.states.indexOf(t) < 0 ? !1 : e.excludedStates ? e.excludedStates.indexOf(t) < 0 ? !0 : !1 : !0 : !1 }).sort(function (t, e) { return t.priority - e.priority }) }, this.groupStatePromisesByPriority = function (t) { var e = [], i = []; return t.forEach(function (t) { e.indexOf(t.priority) < 0 && e.push(t.priority) }), e.forEach(function (r, n) { i.push({ promises: t.filter(function (t) { return t.priority == r }), priority: r, isLast: n == e.length - 1 }) }), i }, this.invoke = function (t, i, r, n, s, o) { var a = [], u = r[n]; u.promises.forEach(function (e) { a.push(t.invoke(e.promise)) }), i.all(a).then(function (a) { a.forEach(function (t, e) { u.promises[e].key && (o[u.promises[e].key] = a[e]) }), u.isLast ? s() : e.invoke(t, i, r, n + 1, s, o) }) }, this.$get = ["$injector", "$q", function (t, i) { return { resolve: function (r, n) { e.stateParams = n; var s = i.defer(), o = {}, a = e.getStatePromises(r), u = e.groupStatePromisesByPriority(a), c = []; return a.forEach(function (t) { c.indexOf(t.priority) < 0 && c.push(t.priority) }), e.invoke(t, i, u, 0, function () { s.resolve(o) }, o), s.promise }, getStateParams: function () { return e.stateParams }, registerDeactivation: function (t) { }, deactivate: function (i) { for (var r = e.deactivationFunctions.filter(function (t) { return null == t.state || t.state == i || t.states && t.states.indexOf(i) > 0 ? !0 : void 0 }), n = 0; n < r.length; n++) t.invoke(r[n].func) }, activate: function (i, r) { var n = e; n.stateParams = r; for (var s = e.activationFunctions, o = s.filter(function (t) { return !t.state && !t.states || t.state == i || t.states && t.states.indexOf(i) > -1 ? !0 : void 0 }), a = 0; a < o.length; a++) t.invoke(o[a].func) } } }] } return e }(); t.StateResolverProvider = e, angular.module("stateResolver").provider("stateResolver", [e]) }(StateResolver || (StateResolver = {}));